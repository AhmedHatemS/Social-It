@using Microsoft.AspNet.Identity;
@model List<SocialIt.Models.ProfileModel>

@{
    ViewBag.Title = "Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <style>
        :root {
            --bs-primary-rgb: 26, 188, 156;
            --bs-white-rgb: 24, 188, 156;
        }

        hr:not([size]) {
            height: 0.125rem;
        }

        h6, .h6, h5, .h5, h4, .h4, h3, .h3, h2, .h2, h1, .h1 {
            margin-top: 0;
            margin-bottom: 0.5rem;
            font-family: "Montserrat", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
            line-height: 1.2;
        }

        h1, .h1 {
            font-size: calc(1.375rem + 1.5vw);
        }

        @@media (min-width: 1200px) {
            h1, .h1 {
                font-size: 2.5rem;
            }
        }

        h2, .h2 {
            font-size: calc(1.325rem + 0.9vw);
        }

        @@media (min-width: 1200px) {
            h2, .h2 {
                font-size: 2rem;
            }
        }

        h3, .h3 {
            font-size: calc(1.3rem + 0.6vw);
        }

        @@media (min-width: 1200px) {
            h3, .h3 {
                font-size: 1.75rem;
            }
        }

        h4, .h4 {
            font-size: calc(1.275rem + 0.3vw);
        }

        @@media (min-width: 1200px) {
            h4, .h4 {
                font-size: 1.5rem;
            }
        }

        h5, .h5 {
            font-size: 1.25rem;
        }

        h6, .h6 {
            font-size: 1rem;
        }

        p {
            margin-top: 0;
            margin-bottom: 1rem;
        }

        .text-center {
            text-align: center !important;
        }

        .text-uppercase {
            text-transform: uppercase !important;
        }

        /* rtl:end:remove */
        .text-primary {
            --bs-text-opacity: 1;
            color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) !important;
        }

        .text-white {
            --bs-text-opacity: 1;
            color: rgba(var(--bs-white-rgb), var(--bs-text-opacity)) !important;
        }

        .text-white-50 {
            --bs-text-opacity: 1;
            color: rgba(255, 255, 255, 0.5) !important;
        }

        .bg-cover {
            --bs-bg-opacity: 100;
            background-image: url("Icon/Cover.png");
            background-color: #2C3E50; /* Used if the image is unavailable */
            height: 300px; /* You must set a specified height */
            background-position: center; /* Center the image */
            background-size: cover; /* Resize the background image to cover the entire container */
        }

        .masthead {
            padding-top: calc(6rem + 74px) !important;
            padding-bottom: 6rem;
        }

            .masthead .masthead-heading {
                font-size: 2.75rem;
                line-height: 2.75rem;
            }

            .masthead .masthead-subheading {
                font-size: 1.25rem;
            }

            .masthead .masthead-avatar {
                width: 20rem;
            }

        @@media (min-width: 992px) {
            .masthead {
                padding-top: calc(6rem + 104px);
                padding-bottom: 6rem;
            }

                .masthead .masthead-heading {
                    font-size: 4rem;
                    line-height: 3.5rem;
                }

                .masthead .masthead-subheading {
                    font-size: 1.5rem;
                }
        }
    </style>
</head>

<body>
    @{string LoggedInId = User.Identity.GetUserId(); }

    @foreach (var user in Model.GroupBy(i => new { i.ProfileUserId, ViewBag.id }).Select(g => g.FirstOrDefault()))
    {
        <header class="masthead bg-cover text-white text-center" style="font-size:16px;">
            <div class="container d-flex align-items-center flex-column">
                <!-- Masthead Avatar Image-->
                @{var image = user.ProfileImage + ".png";}
                <a><img class="masthead-avatar mb-5" style=" width: 250px; height: 250px; object-fit: cover; border-radius: 50%;" src="~/Content/Images/ProfilePics/@image" alt="..." /></a>
                <!-- Profile first and last name -->
                <h1 class="masthead-heading text-uppercase mb-0" style="padding-top:2%;">
                    @user.ProfileFirstName @user.ProfileLastName
                </h1>
                @{
                    if (user.ProfileUserId == LoggedInId)
                    {
                        <p style="padding-top:2%;">
                            @Html.ActionLink("Details", "Details", "AspNetUsers", new { id = user.ProfileUserId }, new { @class = "btn btn-danger" })
                            @Html.ActionLink("Friends", "ShowAllFriends", "FriendOfUsers", new { id = user.ProfileUserId }, new { @class = "btn btn-info" })
                            @Html.ActionLink("Friend Requests", "ShowAllFriendRequest", "FriendRequests", new { id = user.ProfileUserId }, new { @class = "btn btn-warning" })
                        </p>
                    }
                    else if (user.ProfileUserId == ViewBag.id)
                    {


                        bool isFriend = false;
                        bool request = false;


                        if (user.ProfilefriendId == LoggedInId)
                        {

                            isFriend = true;
                        }

                        else if (user.ProfilefriendId != LoggedInId && user.ProfileRequest == user.ProfileUserId && user.ProfileRequester == LoggedInId)
                        {
                            request = true;
                        }

                        if (request)
                        {
                            <p style="padding-top:2%;">
                                @Html.ActionLink("Cancel request", "CancelRequest", "FriendRequests", new { id = user.ProfileUserId }, new { @class = "btn btn-warning" })

                            </p>
                        }
                        else if (isFriend)
                        {
                            <p style="padding-top:2%;">

                                @Html.ActionLink("Unfriend", "UnFriend", "FriendOfUsers", new { id = user.ProfileUserId }, new { @class = "btn btn-danger" })
                            </p>

                        }
                        else
                        {
                            <p style="padding-top:2%;">

                                @Html.ActionLink("Add Friend", "SendRequest", "FriendRequests", new { Id = user.ProfileUserId }, new { @class = "btn btn-info" })

                            </p>

                        }
                    }
                }
            </div>
        </header>
    }

    <div class="row" style=" padding :2%; padding-top:250px; ">

        <!--Retrieve posts in reverse order-->
        @{
            Stack<int?> pid = new Stack<int?>();

            bool noPosts = false;
            foreach (var post in Model.GroupBy(i => new { i.ProfileUserId, i.ProfilePostId })
                    .Select(g => g.FirstOrDefault())) //push postId to stack if mine/friend/public
            {
                if (post.ProfilePostId == null)
                {
                    noPosts = true;
                }
                else
                {
                    if (post.ProfileUserId == LoggedInId) //check if my post || public || poster is my friend
                    {
                        pid.Push(post.ProfilePostId);
                    }
                    else if (post.ProfilefriendId == LoggedInId)
                    {
                        if (post.PostVisibility != "private")
                        {
                            pid.Push(post.ProfilePostId);
                        }

                    }
                    else
                    {
                        if (post.PostVisibility == "public")
                        {
                            pid.Push(post.ProfilePostId);
                        }
                    }
                }
            }
            if (pid.Count() > 0)
            {
                while (pid.Count > 0)
                {
                    Html.RenderAction("Details", "Posts", new { id = pid.Pop(), myId = ViewBag.id });
                    <hr />
                }

            }
            else
            {
                noPosts = true;
            }
            if (noPosts == true)
            {
                <p>Sorry! there is no posts available </p>
            }

        }
    </div>
</body>
